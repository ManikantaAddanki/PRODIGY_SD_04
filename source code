public class SudokuSolver {

    public static void main(String[] args) {
        int[][] board = {
                {5, 3, 0, 0, 7, 0, 0, 0, 0},
                {6, 0, 0, 1, 9, 5, 0, 0, 0},
                {0, 9, 8, 0, 0, 0, 0, 6, 0},
                {8, 0, 0, 0, 6, 0, 0, 0, 3},
                {4, 0, 0, 8, 0, 3, 0, 0, 1},
                {7, 0, 0, 0, 2, 0, 0, 0, 6},
                {0, 6, 0, 0, 0, 0, 2, 8, 0},
                {0, 0, 0, 4, 1, 9, 0, 0, 5},
                {0, 0, 0, 0, 8, 0, 0, 7, 9}
        };

        if (solveSudoku(board)) {
            System.out.println("Sudoku solved successfully:");
            printBoard(board);
        } else {
            System.out.println("No solution exists for the given Sudoku puzzle.");
        }
    }

    public static boolean solveSudoku(int[][] board) {
        int N = board.length;
        int[] emptySpot = findEmptyLocation(board);
        int row = emptySpot[0];
        int col = emptySpot[1];

     
        if (row == -1 && col == -1) {
            return true;
        }

        for (int num = 1; num <= 9; num++) {
            if (isValid(board, row, col, num)) {
                board[row][col] = num;

                if (solveSudoku(board)) {
                    return true;
                }

                board[row][col] = 0;
            }
        }

        return false;
    }

 
    public static int[] findEmptyLocation(int[][] board) {
        int[] emptySpot = {-1, -1};
        int N = board.length;

        for (int row = 0; row < N; row++) {
            for (int col = 0; col < N; col++) {
                if (board[row][col] == 0) {
                    emptySpot[0] = row;
                    emptySpot[1] = col;
                    return emptySpot;
                }
            }
        }

        return emptySpot;
    }

    public static boolean isValid(int[][] board, int row, int col, int num) {
        int N = board.length;

        for (int i = 0; i < N; i++) {
            if (board[row][i] == num || board[i][col] == num) {
                return false;
            }
        }

        int sqrtN = (int) Math.sqrt(N);
        int startRow = row - row % sqrtN;
        int startCol = col - col % sqrtN;

        for (int i = startRow; i < startRow + sqrtN; i++) {
            for (int j = startCol; j < startCol + sqrtN; j++) {
                if (board[i][j] == num) {
                    return false;
                }
            }
        }

        return true;
    }

 
    public static void printBoard(int[][] board) {
        int N = board.length;
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < N; j++) {
                System.out.print(board[i][j] + " ");
            }
            System.out.println();
        }
    }
}
